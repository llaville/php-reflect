ifndef::basebackend-docbook[]

= User Guide
:description: The Command-Line Interface
include::revision.asciidoc[]
include::attributes.asciidoc[]

endif::basebackend-docbook[]

== The Command-Line

[role="lead"]
The command-line interface is the easiest way to try and learn the basic Reflect features.

NOTE: For all users.


=== Command-Line Options

Without +plugins+ and +analysers+ sections in your `phpreflect.json` configuration file,
when you invoke the `phpreflect` command, you should obtain the following commands and options :

[role="output"]
----
        _           ____       __ _           _
  _ __ | |__  _ __ |  _ \ ___ / _| | ___  ___| |_
 | '_ \| '_ \| '_ \| |_) / _ \ |_| |/ _ \/ __| __|
 | |_) | | | | |_) |  _ <  __/  _| |  __/ (__| |_
 | .__/|_| |_| .__/|_| \_\___|_| |_|\___|\___|\__|
 |_|         |_|

phpReflect version 4.2.2

Usage:
 command [options] [arguments]

Options:
  -h, --help            Display this help message
  -q, --quiet           Do not output any message
  -V, --version         Display this application version
      --ansi            Force ANSI output
      --no-ansi         Disable ANSI output
  -n, --no-interaction  Do not ask any interactive question
      --no-plugins      Disables all plugins.
      --profile         Display timing and memory usage information.
      --progress        Show progress bar.
      --output=OUTPUT   Write results to file or URL.
      --manifest        Show which versions of dependencies are bundled.
  -v|vv|vvv, --verbose  Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug

Available commands:
 help                  Displays help for a command
 list                  Lists commands
analyser
 analyser:list         List all analysers available.
 analyser:run          Analyse a data source and display results.
cache
 cache:clear           Clear cache (any adapter and backend).
config
 config:validate       Validates a JSON configuration file.
diagnose
 diagnose:run          Diagnoses the system to identify common errors.
diagram
 diagram:class         Generates diagram about a user class present in a data source.
 diagram:package       Generates diagram about namespaces in a data source.
plugin
 plugin:list           List all plugins installed.
reflection
 reflection:class      Reports information about a user class present in a data source.
 reflection:function   Reports information about a user function present in a data source.
----

[horizontal]
config:validate::
Validates an optional JSON config file.
+
[source,bash]
----
$ phpreflect config:validate
----
+
[role="output"]
----
"/etc/phpreflect.json" config file is valid.
----

[horizontal]
diagnose:run::
Diagnoses the system to identify common errors.
+
[source,bash]
----
$ phpreflect diagnose:run
----
+
[role="output"]
----
Checking php settings:
- Requires PHP 5.5.0 or better OK
- php.ini file loaded C:\UwAmp\bin\php\php-5.6.32\php.ini
- date extension loaded YES
- json extension loaded YES
- pcre extension loaded YES
- phar extension loaded YES
- reflection extension loaded YES
- spl extension loaded YES
- tokenizer extension loaded YES
----
+
TIP: Use verbose level 2 for more details, and level 3 to get raw response

[horizontal]
diagram:class::
Generates diagram about a user class present in a data source.
+
[source,bash]
----
$ phpreflect diagram:class Bartlett\Reflect\Plugin\LogPlugin ./src
----

[horizontal]
diagram:package::
Generates diagram about namespaces in a data source.
+
[source,bash]
----
$ phpreflect diagram:package --engine=graphviz ./src
----

[horizontal]
plugin:list::
List all plugins configured (and correctly installed) in `plugins` section of your `phpreflect.json` config file.
+
[source,bash]
.Without plugins, you will get
----
$ phpreflect plugin:list
----
+
[role="output"]
----
No plugin installed.
----
+
[source,bash]
.With only `Cache` plugin configured, you will get
----
$ phpreflect plugin:list
----
+
[role="output"]
----
 Plugin Class                           Events Subscribed
 Bartlett\Reflect\Plugin\CachePlugin    reflect.progress
                                        reflect.success
                                        reflect.complete
----

[horizontal]
analyser:list::
List all analysers configured in `analysers` section of your `phpreflect.json` config file,
and available by default.
+
[source,bash]
.With only default analysers, you will get
----
$ phpreflect analyser:list
----
+
[role="output"]
----
 Analyser Name Analyser Class
 loc           Bartlett\Reflect\Analyser\LocAnalyser
 reflection    Bartlett\Reflect\Analyser\ReflectionAnalyser
 structure     Bartlett\Reflect\Analyser\StructureAnalyser
----
+
analyser:run::
Parse a data source and display results. May vary depending of the data source and analyser used.
+
[source,bash]
.With `structure` analyser and the Reflect source code, you will get something like
----
$ phpreflect analyser:run .
----
+
[source,bash]
.Possible alternative (if you use the default json config file)
----
$ phpreflect analyser:run --alias current
----
+
[role="output"]
----
include::structure_analysis.out.asciidoc[]
----
+
[source,bash]
.Filter results with a closure (available since version [label label-success]*3.1.0*)
----
$ phpreflect analyser:run --filter=YourFilters.php .
----
+
[source, php]
----
include::php_filters.asciidoc[]
----
+
[role="output"]
----
include::structure_analysis_filtered.out.asciidoc[]
----
+
WARNING: The filter's file that host the `$closure`, must be resolvable through the include_path.

[horizontal]
reflection:class::
Reports information about a user class present in a data source.
+
[source,bash]
.With the Reflect source code (`./src`), and `Bartlett\Reflect` class
----
$ phpreflect reflection:class Bartlett\Reflect ./src
----
+
[role="output"]
----
include::reflection_class.out.asciidoc[]
----


== Summary

[role="lead"]
Let's review what we've learned about the command-line interface :

* It's a Symfony http://symfony.com/doc/current/components/console/index.html[Console Component] that can be extended to infinite via plugins and analysers.
* Default analyser produced results such as https://github.com/sebastianbergmann/phploc[PHPLoc] by Sebastian Bergmann.

ifdef::basebackend-bootstrap[]
== Next

[role="lead"]
For PHP developers only.

************************************************
.Read more

* Want to learn more about [label label-primary]#Reflect# architecture and /or
you want to extends it to match your needs,
have a look on link:developer-guide.html[developer's guide].

************************************************
endif::basebackend-bootstrap[]
